# Generated by Django 5.1.6 on 2025-04-09 13:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import portal.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100)),
                ('pincode', models.CharField(max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_sports', models.CharField(choices=[('Cricket', 'Cricket'), ('Football', 'Football'), ('Badminton', 'Badminton'), ('Athletics-100m', 'Athletics-100m'), ('Athletics-200m', 'Athletics-200m')], max_length=100)),
                ('scoring_system', models.CharField(choices=[('Runs', 'Runs'), ('Goals', 'Goals'), ('Points', 'Points'), ('Time', 'Time')], max_length=50)),
                ('gender', models.CharField(choices=[('Men', 'Men'), ('Women', 'Women'), ('Mixed', 'Mixed')], max_length=50)),
                ('max_size', models.IntegerField()),
                ('min_size', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100)),
                ('password', models.CharField(default=portal.models.Organizer.generate_random_password, max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=10)),
                ('organizerCompany', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='organizer_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='organizer_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('venue', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('Scheduled', 'Scheduled'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled')], default='Scheduled', max_length=20)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.event')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.organizer')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.organizer'),
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('dob', models.DateField()),
                ('phone', models.CharField(max_length=10)),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.college')),
            ],
        ),
        migrations.CreateModel(
            name='AthleticsScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verdict', models.CharField(blank=True, choices=[('Qualified', 'Qualified'), ('Disqualified', 'Disqualified'), ('Did Not Finish', 'Did Not Finish')], default='Did Not Finish', max_length=20, null=True)),
                ('time', models.DurationField(blank=True, null=True)),
                ('distance', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.event')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.match')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='athletics_scores', to='portal.participant')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_size', models.IntegerField()),
                ('captain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='captain', to='portal.participant')),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.college')),
                ('event', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_event', to='portal.event')),
                ('participants', models.ManyToManyField(to='portal.participant')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='teams',
            field=models.ManyToManyField(to='portal.team'),
        ),
        migrations.CreateModel(
            name='FootballScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team1_goals', models.IntegerField(default=0)),
                ('team2_goals', models.IntegerField(default=0)),
                ('team1_points', models.IntegerField(default=0)),
                ('team2_points', models.IntegerField(default=0)),
                ('verdict_for_team1', models.CharField(blank=True, choices=[('Win', 'Win'), ('Loss', 'Loss'), ('Draw', 'Draw')], max_length=20, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.event')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.match')),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='football_scores1', to='portal.team')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='football_scores2', to='portal.team')),
            ],
        ),
        migrations.CreateModel(
            name='CricketScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team1_score', models.IntegerField()),
                ('team2_score', models.IntegerField()),
                ('team1_overs', models.IntegerField()),
                ('team2_overs', models.IntegerField()),
                ('team1_wickets', models.IntegerField()),
                ('team2_wickets', models.IntegerField()),
                ('verdict_for_team1', models.CharField(choices=[('win', 'Win'), ('loss', 'Loss'), ('tie', 'Tie'), ('no_result', 'No Result')], max_length=20)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.event')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.match')),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team1_score', to='portal.team')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_score', to='portal.team')),
            ],
        ),
        migrations.CreateModel(
            name='BannedParticipants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.participant')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.team')),
            ],
        ),
        migrations.CreateModel(
            name='BadmintonScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team1_sets_won', models.IntegerField(default=0)),
                ('team2_sets_won', models.IntegerField(default=0)),
                ('team1_points', models.IntegerField(default=0)),
                ('team2_points', models.IntegerField(default=0)),
                ('verdict_for_team1', models.CharField(blank=True, choices=[('Win', 'Win'), ('Loss', 'Loss')], max_length=20, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.event')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.match')),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badminton_scores', to='portal.team')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badminton_scores2', to='portal.team')),
            ],
        ),
    ]
